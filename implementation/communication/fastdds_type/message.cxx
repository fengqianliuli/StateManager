// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file message.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "message.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


namespace sm {



Message::Message()
{
}

Message::~Message()
{
}

Message::Message(
        const Message& x)
{
    m_id = x.m_id;
    m_msg_type = x.m_msg_type;
    m_content = x.m_content;
}

Message::Message(
        Message&& x) noexcept
{
    m_id = x.m_id;
    m_msg_type = x.m_msg_type;
    m_content = std::move(x.m_content);
}

Message& Message::operator =(
        const Message& x)
{

    m_id = x.m_id;
    m_msg_type = x.m_msg_type;
    m_content = x.m_content;
    return *this;
}

Message& Message::operator =(
        Message&& x) noexcept
{

    m_id = x.m_id;
    m_msg_type = x.m_msg_type;
    m_content = std::move(x.m_content);
    return *this;
}

bool Message::operator ==(
        const Message& x) const
{
    return (m_id == x.m_id &&
           m_msg_type == x.m_msg_type &&
           m_content == x.m_content);
}

bool Message::operator !=(
        const Message& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void Message::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t Message::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& Message::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member msg_type
 * @param _msg_type New value for member msg_type
 */
void Message::msg_type(
        sm::MsgType _msg_type)
{
    m_msg_type = _msg_type;
}

/*!
 * @brief This function returns the value of member msg_type
 * @return Value of member msg_type
 */
sm::MsgType Message::msg_type() const
{
    return m_msg_type;
}

/*!
 * @brief This function returns a reference to member msg_type
 * @return Reference to member msg_type
 */
sm::MsgType& Message::msg_type()
{
    return m_msg_type;
}


/*!
 * @brief This function copies the value in member content
 * @param _content New value to be copied in member content
 */
void Message::content(
        const std::string& _content)
{
    m_content = _content;
}

/*!
 * @brief This function moves the value in member content
 * @param _content New value to be moved in member content
 */
void Message::content(
        std::string&& _content)
{
    m_content = std::move(_content);
}

/*!
 * @brief This function returns a constant reference to member content
 * @return Constant reference to member content
 */
const std::string& Message::content() const
{
    return m_content;
}

/*!
 * @brief This function returns a reference to member content
 * @return Reference to member content
 */
std::string& Message::content()
{
    return m_content;
}




} // namespace sm
// Include auxiliary functions like for serializing/deserializing.
#include "messageCdrAux.ipp"

